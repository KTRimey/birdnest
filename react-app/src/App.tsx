import { useState, useCallback, useEffect } from "react";
import * as C from "@chakra-ui/react";
import { ColorModeSwitcher } from "./ColorModeSwitcher";

import PilotInfo from "./PilotInfo";

type Pilot = {
  last_seen: string;
  closest_approach: number;
  name: string;
  phone: string;
  email: string;
};

export function App() {
  const [pilots, setPilots] = useState<{ string: Pilot }>();

  const doFetch = useCallback(() => {
    fetch("/report")
      .then((res) => res.json())
      .then((data) => {
        setPilots(data);
      })
      .catch((e: Error) => {
        console.error(e);
      });
  }, []);

  useEffect(() => {
    doFetch(); // on page load
    // fetch on interval
    const interval = setInterval(() => {
      doFetch();
    }, 2000);
    return () => clearInterval(interval);
  }, [doFetch]);

  return (
    <C.ChakraProvider theme={C.theme}>
      <C.Grid p={3}>
        <ColorModeSwitcher justifySelf="flex-end" />
        <C.VStack spacing={8}>
          <C.Popover
            trigger="hover"
            placement="right"
            arrowSize={15}
            openDelay={500}
            closeDelay={500}
          >
            <C.PopoverTrigger>
              <C.Image
                boxSize="15rem"
                src="/DALLE.png"
                alt="DALL-E generated image of drone and duck"
              />
            </C.PopoverTrigger>
            <C.PopoverContent>
              <C.PopoverArrow />
              <C.PopoverBody>
                Image generated by{" "}
                <C.Link href="https://openai.com/dall-e-2/" color="teal.500">
                  OpenAI DALL-E 2
                </C.Link>
              </C.PopoverBody>
            </C.PopoverContent>
          </C.Popover>
          <C.Text fontSize="xl">
            Pilots who have recently violated the NDZ perimeter
          </C.Text>
          <C.TableContainer>
            <C.Table>
              <C.Thead>
                <C.Tr>
                  <C.Th />
                  <C.Th>Closest Approach</C.Th>
                  <C.Th>Last Seen</C.Th>
                  <C.Th />
                </C.Tr>
              </C.Thead>
              <C.Tbody>
                {pilots &&
                  Object.entries(pilots).map(([pilotId, pilot]) => (
                    <C.Tr key={pilotId}>
                      <PilotInfo
                        id={pilotId}
                        closest_approach={pilot.closest_approach}
                        last_seen={pilot.last_seen}
                        name={pilot.name}
                        phone={pilot.phone}
                        email={pilot.email}
                      />
                    </C.Tr>
                  ))}
              </C.Tbody>
            </C.Table>
          </C.TableContainer>
        </C.VStack>
      </C.Grid>
    </C.ChakraProvider>
  );
}
